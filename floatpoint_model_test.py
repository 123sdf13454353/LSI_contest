from fixedpoint_update import convert_weights_to_fxp,save_weights_to_dict,extract_weights_recursive
from dataset import load_dataset
from config import encoder_floatpoint,decoder_floatpoint,load_model


from model import VAE
import os
import random
import numpy as np
import tensorflow as tf
import glob
import matplotlib.pyplot as plt
from PIL import Image

# ƒê∆∞·ªùng d·∫´n t·ªõi m√¥ h√¨nh ƒë√£ l∆∞u
# encoder_path = "vae_encoder_fixed_16_8.h5"
# decoder_path = "vae_decoder_fixed_16_8.h5"
# encoder = load_model(ENCODER_PATH)
# decoder = load_model(DECODER_PATH)
# # L·∫•y danh s√°ch t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c

x_train_new, x_test,x_good,x_cut,x_train,x_hole,x_print=load_dataset()
vae_afterload = VAE( encoder_floatpoint, decoder_floatpoint, beta=0.001)
vae_afterload.compile(optimizer="adam", loss="mse", metrics=['accuracy'])

loss, accuracy = vae_afterload.evaluate(x_test, x_test, verbose=1)

print(f"üîç ƒê√°nh gi√° m√¥ h√¨nh:")
print(f"‚úÖ Loss: {loss:.4f}")
print(f"‚úÖ Accuracy: {accuracy:.4f}")
# L·∫•y danh s√°ch t·∫•t c·∫£ ·∫£nh trong th∆∞ m·ª•c


image_paths = glob.glob('hazelnut/test/print/*.png')

# X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng ·∫£nh
num_images = len(image_paths)
num_cols = 4  # S·ªë c·ªôt trong grid
num_rows = (num_images + num_cols - 1) // num_cols  # T√≠nh s·ªë h√†ng c·∫ßn thi·∫øt

# T·∫°o figure v·ªõi k√≠ch th∆∞·ªõc ph√π h·ª£p
fig, axes = plt.subplots(2 * num_rows, num_cols, figsize=(4 * num_cols, 3 * num_rows))

for i, image_path in enumerate(image_paths):
    row = i // num_cols  # X√°c ƒë·ªãnh h√†ng trong grid
    col = i % num_cols   # X√°c ƒë·ªãnh c·ªôt trong grid

    # ƒê·ªçc ·∫£nh v√† ti·ªÅn x·ª≠ l√Ω
    image = Image.open(image_path).convert("RGB")
    image = image.resize((64, 64))
    image_array = np.array(image) / 255.0
    image_array = np.expand_dims(image_array, axis=0)

    # D·ª± ƒëo√°n ·∫£nh s·ª≠ d·ª•ng m√¥ h√¨nh ƒë√£ load
    reconstructed_image = vae_afterload.predict(image_array)

    # T√≠nh to√°n b·∫£n ƒë·ªì l·ªói
    error_image = (image_array - reconstructed_image) ** 2
    error_image = np.mean(error_image, axis=-1)

    # # Lo·∫°i b·ªè gi√° tr·ªã nh·ªè h∆°n threshold (gi·ªØ l·∫°i ƒëi·ªÉm b·∫•t th∆∞·ªùng)
    threshold = 0.035 # Ho·∫∑c d√πng Gaussian threshold n·∫øu c·∫ßn
    error_image[error_image < threshold] = 0

    # Hi·ªÉn th·ªã ·∫£nh g·ªëc
    axes[2 * row, col].imshow(image_array[0])
    axes[2 * row, col].axis("off")
    axes[2 * row, col].set_title(f"Image {i+1}", fontsize=10)

    # Hi·ªÉn th·ªã b·∫£n ƒë·ªì l·ªói
    axes[2 * row + 1, col].imshow(error_image[0], cmap="gray")
    axes[2 * row + 1, col].axis("off")
    axes[2 * row + 1, col].set_title(f"Anomaly Map {i+1}", fontsize=10)

# X√≥a c√°c √¥ tr·ªëng n·∫øu t·ªïng s·ªë ·∫£nh kh√¥ng chia h·∫øt cho s·ªë c·ªôt
for j in range(num_images, num_cols * num_rows):
    axes[2 * (j // num_cols), j % num_cols].axis("off")
    axes[2 * (j // num_cols) + 1, j % num_cols].axis("off")

plt.tight_layout()
plt.show()
